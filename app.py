import streamlit as st
import pandas as pd
import os
import json
import google.generativeai as genai
from datetime import datetime
import openpyxl
from openpyxl.styles import Font, Border, Side, Alignment
import re
from copy import copy

# --- Configuration and API Key ---
st.set_page_config(page_title="–°–∫–ª–∞–¥–æ–≤ AI –ê—Å–∏—Å—Ç–µ–Ω—Ç", layout="centered")

def get_api_key():
    try:
        return st.secrets["GEMINI_API_KEY"]
    except (FileNotFoundError, KeyError):
        try:
            with open("config.txt", "r") as f:
                return f.read().strip()
        except FileNotFoundError:
            return None

GEMINI_API_KEY = get_api_key()
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
else:
    st.error("–í–∞—à–∏—è—Ç Gemini API –∫–ª—é—á –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω. –ú–æ–ª—è, –¥–æ–±–∞–≤–µ—Ç–µ –≥–æ –≤ secrets.toml –∏–ª–∏ config.txt.")

# --- File Names ---
DOCUMENTS_EXCEL_FILE = "–ö–Ω–∏–≥–∞1.xlsx"
INVENTORY_EXCEL_FILE = "inventory.xlsx"


# --- Data Loading Functions ---
@st.cache_data
def load_documents_data(file_path):
    try:
        if not os.path.exists(file_path):
            st.error(f"–§–∞–π–ª—ä—Ç '{file_path}' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω. –ú–æ–ª—è, —É–≤–µ—Ä–µ—Ç–µ —Å–µ, —á–µ –µ –≤ —Å—ä—â–∞—Ç–∞ –ø–∞–ø–∫–∞.")
            return None
        df = pd.read_excel(file_path, header=3, dtype=str).fillna('')
        df.columns = df.columns.str.strip().str.replace(r'\s+', ' ', regex=True)
        if '–ë–µ–ª–µ–∂–∫–∞' not in df.columns:
            df['–ë–µ–ª–µ–∂–∫–∞'] = ''
        df_display = df[df['–ö–ª–∏–µ–Ω—Ç –∏–º–µ'].str.strip().str.upper() != '–û–ë–©–û']
        return df_display
    except Exception as e:
        st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ '{file_path}': {e}")
        return None

@st.cache_data
def load_inventory_data(file_path):
    try:
        if not os.path.exists(file_path):
            st.error(f"–§–∞–π–ª—ä—Ç '{file_path}' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω. –ú–æ–ª—è, —É–≤–µ—Ä–µ—Ç–µ —Å–µ, —á–µ –µ –≤ —Å—ä—â–∞—Ç–∞ –ø–∞–ø–∫–∞.")
            return None
        return pd.read_excel(file_path, dtype=str).fillna('')
    except Exception as e:
        st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ '{file_path}': {e}")
        return None

# --- AI and Helper Functions ---
def find_document_column_name(df):
    possible_names = ['–§–∞–∫—Ç—É—Ä–∞ ‚Ññ', '—Ñ–∞–∫—Ç—É—Ä–∞ ‚Ññ', '–ù–æ–º–µ—Ä –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç', '–§–∞–∫—Ç—É—Ä–∞']
    for name in possible_names:
        if name in df.columns:
            return name
    return None

# --- NEW: Restored and Improved AI Function ---
def run_ai_doc_search(doc_number, data_string, doc_column_name):
    """
    Uses a more robust "few-shot" prompt to guide the AI, making it more reliable.
    """
    model = genai.GenerativeModel('gemini-1.5-pro-latest')
    prompt = f"""
    You are an expert AI assistant for analyzing tabular data from a CSV string.
    Your task is to find all rows for document number '{doc_number}' and extract the specified information for each row into a valid JSON format.

    The main challenge is to correctly identify the '–ò–º–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç' (Product Name) and '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' (Quantity). The '–ò–º–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç' is the *name of the column* that contains the quantity for that specific row. This column will be located between the '–û–±—â–æ –∫–æ–ª-–≤–æ' and '–¶–µ–Ω–∞' columns.

    ---
    **EXAMPLE:**

    *Input Data Snippet:*
    ```csv
    –ö–ª–∏–µ–Ω—Ç –∏–º–µ,–ë–µ–ª–µ–∂–∫–∞,–î–∞—Ç–∞,–§–∞–∫—Ç—É—Ä–∞ ‚Ññ,–û–±—â–æ –∫–æ–ª-–≤–æ,Product A,Product B,–¶–µ–Ω–∞,–°—É–º–∞ –ª–≤.
    –ó–ü –ò–í–ê–ù –ü–ï–¢–†–û–í,,2024-07-20,59460,10,,10,150.00,1500.00
    ```

    *Desired JSON Output for the example:*
    ```json
    {{
      "–¥–æ–∫—É–º–µ–Ω—Ç–∏": [
        {{
          "–ò–º–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç": "–ó–ü –ò–í–ê–ù –ü–ï–¢–†–û–í",
          "–ë–µ–ª–µ–∂–∫–∞": "",
          "–î–∞—Ç–∞ –Ω–∞ –∏–∑–¥–∞–≤–∞–Ω–µ": "2024-07-20",
          "–ò–º–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç": "Product B",
          "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "10",
          "–¶–µ–Ω–∞": "150.00",
          "–°—É–º–∞ –ª–≤.": "1500.00"
        }}
      ]
    }}
    ```
    ---

    **NOW, ANALYZE THE FOLLOWING DATA AND PROVIDE THE JSON OUTPUT:**

    **Document to find:** '{doc_number}'
    **Data:**
    ```csv
    {data_string}
    ```

    **Instructions:**
    1. Find ALL rows where the '{doc_column_name}' column is exactly '{doc_number}'.
    2. For each matching row:
        - Extract "–ò–º–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç", "–ë–µ–ª–µ–∂–∫–∞", "–î–∞—Ç–∞", "–¶–µ–Ω–∞", and "–°—É–º–∞ –ª–≤." directly from their columns. Use the '–î–∞—Ç–∞' value for "–î–∞—Ç–∞ –Ω–∞ –∏–∑–¥–∞–≤–∞–Ω–µ".
        - To find "–ò–º–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç" and "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": Look at the columns between "–û–±—â–æ –∫–æ–ª-–≤–æ" and "–¶–µ–Ω–∞". The one column that has a number in it for this specific row is the "–ò–º–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç", and the number itself is the "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ".
    3. If no document is found, or if you cannot process the data, return an empty JSON object like `{{"–¥–æ–∫—É–º–µ–Ω—Ç–∏": []}}`.
    """
    try:
        response = model.generate_content(prompt)
        clean_response = response.text.strip().replace("```json", "").replace("```", "")
        if not clean_response or not clean_response.strip().startswith('{'):
            return None
        return json.loads(clean_response)
    except Exception:
        return None


# --- File Writing Functions ---
def update_inventory(file_path, product_name, quantity_to_subtract):
    try:
        df = pd.read_excel(file_path)
        product_rows = df.index[df['–ü—Ä–æ–¥—É–∫—Ç'] == product_name].tolist()
        if not product_rows:
            raise ValueError(f"–ü—Ä–æ–¥—É–∫—Ç—ä—Ç '{product_name}' –Ω–µ –±–µ—à–µ –Ω–∞–º–µ—Ä–µ–Ω –≤ '{file_path}'.")
        idx = product_rows[0]
        current_quantity = pd.to_numeric(df.loc[idx, '–ù–∞–ª–∏—á–Ω–æ—Å—Ç'], errors='coerce')
        if pd.isna(current_quantity):
             raise TypeError(f"–ù–∞–ª–∏—á–Ω–æ—Å—Ç—Ç–∞ –∑–∞ '{product_name}' –Ω–µ –µ –≤–∞–ª–∏–¥–Ω–æ —á–∏—Å–ª–æ.")
        new_quantity = int(current_quantity) - int(quantity_to_subtract)
        if new_quantity < 0:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç—ä—á–Ω–∞ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç –∑–∞ '{product_name}'. –ù–∞–ª–∏—á–Ω–∏: {current_quantity}, –ù—É–∂–Ω–∏: {quantity_to_subtract}.")
        df.loc[idx, '–ù–∞–ª–∏—á–Ω–æ—Å—Ç'] = new_quantity
        df.to_excel(file_path, index=False)
        return True
    except PermissionError:
        raise PermissionError(f"–ù—è–º–∞ –¥–æ—Å—Ç—ä–ø –¥–æ '{file_path}'. –ú–æ–ª—è, –∑–∞—Ç–≤–æ—Ä–µ—Ç–µ —Ñ–∞–π–ª–∞, –∞–∫–æ –µ –æ—Ç–≤–æ—Ä–µ–Ω, –∏ –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.")
    except Exception as e:
        raise e

def append_to_documents(file_path, row_data, all_cols):
    try:
        workbook = openpyxl.load_workbook(file_path)
        sheet = workbook.active
        try:
            client_name_col_index = all_cols.index('–ö–ª–∏–µ–Ω—Ç –∏–º–µ') + 1
        except ValueError:
            client_name_col_index = 2
        insert_row_index = -1
        for row_num in range(sheet.max_row, 3, -1):
            cell_value = sheet.cell(row=row_num, column=client_name_col_index).value
            if isinstance(cell_value, str) and cell_value.strip().upper() == '–û–ë–©–û':
                insert_row_index = row_num
                break
        if insert_row_index == -1:
            insert_row_index = sheet.max_row + 1
        sheet.insert_rows(insert_row_index)
        style_source_row_num = insert_row_index - 1
        if style_source_row_num > 3:
            for col_idx, col_name in enumerate(all_cols, 1):
                source_cell = sheet.cell(row=style_source_row_num, column=col_idx)
                target_cell = sheet.cell(row=insert_row_index, column=col_idx)
                if source_cell.has_style:
                    target_cell._style = copy(source_cell._style)
                target_cell.value = row_data.get(col_name)
                if col_name == '–î–∞—Ç–∞' and isinstance(target_cell.value, datetime):
                    target_cell.number_format = 'm/d/yyyy'
        else:
            for col_idx, col_name in enumerate(all_cols, 1):
                 sheet.cell(row=insert_row_index, column=col_idx).value = row_data.get(col_name)
        workbook.save(file_path)
        return True
    except PermissionError:
        raise PermissionError(f"–ù—è–º–∞ –¥–æ—Å—Ç—ä–ø –¥–æ '{file_path}'. –ú–æ–ª—è, –∑–∞—Ç–≤–æ—Ä–µ—Ç–µ —Ñ–∞–π–ª–∞, –∞–∫–æ –µ –æ—Ç–≤–æ—Ä–µ–Ω, –∏ –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.")
    except Exception as e:
        raise e

# --- Streamlit App ---
st.title("–°–∫–ª–∞–¥–æ–≤ AI –ê—Å–∏—Å—Ç–µ–Ω—Ç üì¶")

# Load Data
documents_df = load_documents_data(DOCUMENTS_EXCEL_FILE)
inventory_df = load_inventory_data(INVENTORY_EXCEL_FILE)

app_mode = st.sidebar.radio(
    "–ò–∑–±–µ—Ä–µ—Ç–µ —Ä–µ–∂–∏–º –Ω–∞ —Ä–∞–±–æ—Ç–∞:",
    ("–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∑–∞–ø–∏—Å", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –î–æ–∫—É–º–µ–Ω—Ç (—Å AI)", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ü—Ä–æ–¥—É–∫—Ç")
)

# --- Mode 1: Add Entry ---
if app_mode == "–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∑–∞–ø–∏—Å":
    # ... (This section is unchanged)
    st.header("–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤ –∑–∞–ø–∏—Å")
    st.info("–ü–æ–ø—ä–ª–Ω–µ—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∞, –∑–∞ –¥–∞ –¥–æ–±–∞–≤–∏—Ç–µ –Ω–æ–≤ —Ä–µ–¥ –∫—ä–º '–ö–Ω–∏–≥–∞1.xlsx' –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–∞ –æ–±–Ω–æ–≤–∏—Ç–µ 'inventory.xlsx'.")
    all_cols_from_df = []
    try:
        temp_df = pd.read_excel(DOCUMENTS_EXCEL_FILE, header=3)
        all_cols_from_df = [re.sub(r'\s+', ' ', str(c).strip()) for c in temp_df.columns]
    except FileNotFoundError:
        pass
    except Exception as e:
        st.error(f"–ù–µ—É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ –Ω–∞ –∫–æ–ª–æ–Ω–∏—Ç–µ –æ—Ç '{DOCUMENTS_EXCEL_FILE}': {e}")
    if documents_df is None or inventory_df is None:
        st.warning("–ï–¥–∏–Ω –∏–ª–∏ –ø–æ–≤–µ—á–µ –æ—Ç —Ñ–∞–π–ª–æ–≤–µ—Ç–µ –Ω–µ —Å–∞ –∑–∞—Ä–µ–¥–µ–Ω–∏. –ú–æ–ª—è, –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ —Å—ä–æ–±—â–µ–Ω–∏—è—Ç–∞ –∑–∞ –≥—Ä–µ—à–∫–∏ –ø–æ-–≥–æ—Ä–µ.")
    else:
        try:
            start_index = all_cols_from_df.index('–û–±—â–æ –∫–æ–ª-–≤–æ') + 1
            end_index = all_cols_from_df.index('–¶–µ–Ω–∞')
            product_list = all_cols_from_df[start_index:end_index]
        except (ValueError, IndexError):
            st.error("–°—Ç—Ä—É–∫—Ç—É—Ä–∞—Ç–∞ –Ω–∞ Excel —Ñ–∞–π–ª–∞ –µ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞. –õ–∏–ø—Å–≤–∞—Ç –∫–æ–ª–æ–Ω–∏ '–û–±—â–æ –∫–æ–ª-–≤–æ' –∏–ª–∏ '–¶–µ–Ω–∞'.")
            product_list = []
        if product_list:
            with st.form("new_entry_form"):
                st.subheader("–î–∞–Ω–Ω–∏ –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                col1, col2 = st.columns(2)
                with col1:
                    doc_number = st.text_input("–§–∞–∫—Ç—É—Ä–∞ ‚Ññ", placeholder="–ü—Ä–∏–º–µ—Ä: 2000012345")
                    client_name = st.text_input("–ò–º–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç (—â–µ –±—ä–¥–µ —Å –≥–ª–∞–≤–Ω–∏ –±—É–∫–≤–∏)")
                with col2:
                    doc_date = st.date_input("–î–∞—Ç–∞ –Ω–∞ –∏–∑–¥–∞–≤–∞–Ω–µ", value=datetime.now())
                    doc_note = st.text_input("–ë–µ–ª–µ–∂–∫–∞")
                st.subheader("–î–∞–Ω–Ω–∏ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞")
                col3, col4, col5 = st.columns(3)
                with col3:
                    selected_product = st.selectbox("–ò–∑–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç", options=product_list)
                with col4:
                    quantity = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=1, step=1)
                with col5:
                    price = st.number_input("–ï–¥. —Ü–µ–Ω–∞ (–ª–≤.)", min_value=0.0, value=0.0, format="%.2f")
                submitted = st.form_submit_button("‚úÖ –ó–∞–ø–∞–∑–∏ –∑–∞–ø–∏—Å–∞ –∏ –æ–±–Ω–æ–≤–∏ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç–∏")
                if submitted:
                    if not doc_number or not client_name or not selected_product:
                        st.warning("–ú–æ–ª—è, –ø–æ–ø—ä–ª–Ω–µ—Ç–µ '–§–∞–∫—Ç—É—Ä–∞ ‚Ññ', '–ò–º–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç' –∏ –∏–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–æ–¥—É–∫—Ç.")
                    else:
                        new_row_data = {col: None for col in all_cols_from_df}
                        new_row_data['–î–∞—Ç–∞'] = doc_date
                        new_row_data['–§–∞–∫—Ç—É—Ä–∞ ‚Ññ'] = doc_number
                        new_row_data['–ö–ª–∏–µ–Ω—Ç –∏–º–µ'] = client_name.upper()
                        new_row_data['–ë–µ–ª–µ–∂–∫–∞'] = doc_note
                        new_row_data['–û–±—â–æ –∫–æ–ª-–≤–æ'] = int(quantity)
                        new_row_data[selected_product] = int(quantity)
                        new_row_data['–¶–µ–Ω–∞'] = float(price)
                        new_row_data['–°—É–º–∞ –ª–≤.'] = float(quantity) * float(price)
                        try:
                            update_inventory(INVENTORY_EXCEL_FILE, selected_product, quantity)
                            append_to_documents(DOCUMENTS_EXCEL_FILE, new_row_data, all_cols_from_df)
                            st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ó–∞–ø–∏—Å—ä—Ç –µ –¥–æ–±–∞–≤–µ–Ω –∏ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç—Ç–∞ –∑–∞ '{selected_product}' –µ –æ–±–Ω–æ–≤–µ–Ω–∞.")
                            st.balloons()
                            st.cache_data.clear()
                        except Exception as e:
                            st.error(f"‚ùå –ì—Ä–µ—à–∫–∞: {e}")

# --- Mode 2: Product Search ---
elif app_mode == "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ü—Ä–æ–¥—É–∫—Ç":
    # ... (This section is unchanged)
    st.header("–¢—ä—Ä—Å–µ–Ω–µ –ø–æ –ø—Ä–æ–¥—É–∫—Ç")
    if documents_df is None or inventory_df is None:
        st.error("–ï–¥–∏–Ω –∏–ª–∏ –ø–æ–≤–µ—á–µ –æ—Ç —Ñ–∞–π–ª–æ–≤–µ—Ç–µ ('–ö–Ω–∏–≥–∞1.xlsx', 'inventory.xlsx') –Ω–µ —Å–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏.")
    else:
        doc_column_name = find_document_column_name(documents_df)
        if not doc_column_name:
            st.error("–ù–µ –º–æ–≥–∞ –¥–∞ –Ω–∞–º–µ—Ä—è –∫–æ–ª–æ–Ω–∞ –∑–∞ –Ω–æ–º–µ—Ä –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç.")
        else:
            all_cols = documents_df.columns.tolist()
            try:
                start_index = all_cols.index('–û–±—â–æ –∫–æ–ª-–≤–æ') + 1
                end_index = all_cols.index('–¶–µ–Ω–∞')
                product_list = all_cols[start_index:end_index]
            except ValueError:
                st.error("–ù–µ —Å–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –∫–æ–ª–æ–Ω–∏—Ç–µ '–û–±—â–æ –∫–æ–ª-–≤–æ' –∏–ª–∏ '–¶–µ–Ω–∞'.")
                product_list = []
            selected_product = st.selectbox("–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", product_list)
            if st.button("–¢—ä—Ä—Å–∏"):
                matching_docs = documents_df[documents_df[selected_product].notna() & (documents_df[selected_product] != '')].copy()
                inventory_info = inventory_df[inventory_df['–ü—Ä–æ–¥—É–∫—Ç'].str.strip().str.replace(r'\s+', ' ', regex=True) == selected_product]
                quantity_available = inventory_info['–ù–∞–ª–∏—á–Ω–æ—Å—Ç'].iloc[0] if not inventory_info.empty else '0'
                st.metric(label=f"–ù–∞–ª–∏—á–Ω–æ—Å—Ç –∑–∞ '{selected_product}'", value=f"{quantity_available} –±—Ä.")
                st.subheader("–î–æ–∫—É–º–µ–Ω—Ç–∏, —Å—ä–¥—ä—Ä–∂–∞—â–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:")
                if matching_docs.empty:
                    st.info("–ù—è–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏, —Å—ä–¥—ä—Ä–∂–∞—â–∏ —Ç–æ–∑–∏ –ø—Ä–æ–¥—É–∫—Ç.")
                else:
                    processed_rows = []
                    for index, row in matching_docs.iterrows():
                        new_row = {
                            doc_column_name: row.get(doc_column_name),
                            '–î–∞—Ç–∞ –Ω–∞ –∏–∑–¥–∞–≤–∞–Ω–µ': row.get('–î–∞—Ç–∞'),
                            '–ò–º–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç': row.get('–ö–ª–∏–µ–Ω—Ç –∏–º–µ'),
                            '–ë–µ–ª–µ–∂–∫–∞': row.get('–ë–µ–ª–µ–∂–∫–∞', ''),
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': row.get(selected_product),
                            '–¶–µ–Ω–∞': row.get('–¶–µ–Ω–∞'),
                            '–°—É–º–∞ –ª–≤.': row.get('–°—É–º–∞ –ª–≤.')
                        }
                        processed_rows.append(new_row)
                    for doc_item in processed_rows:
                        with st.expander(f"**–î–æ–∫—É–º–µ–Ω—Ç ‚Ññ:** {doc_item.get(doc_column_name, '-')} | **–ö–ª–∏–µ–Ω—Ç:** {doc_item.get('–ò–º–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç', '-')}"):
                            st.markdown(f"**–î–∞—Ç–∞:** {doc_item.get('–î–∞—Ç–∞ –Ω–∞ –∏–∑–¥–∞–≤–∞–Ω–µ', '-')}")
                            st.markdown(f"**–ë–µ–ª–µ–∂–∫–∞:** *{doc_item.get('–ë–µ–ª–µ–∂–∫–∞') or '–ù—è–º–∞'}*")
                            st.markdown(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {doc_item.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '-')} | **–¶–µ–Ω–∞:** {doc_item.get('–¶–µ–Ω–∞', '-')} –ª–≤. | **–°—É–º–∞:** {doc_item.get('–°—É–º–∞ –ª–≤.', '-')} –ª–≤.")

# --- Mode 3: Document Search (Reverted to AI with improved prompt) ---
elif app_mode == "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –î–æ–∫—É–º–µ–Ω—Ç (—Å AI)":
    st.header("–¢—ä—Ä—Å–µ–Ω–µ –ø–æ –Ω–æ–º–µ—Ä –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç (—Å AI)")
    if documents_df is None:
        st.error(f"–§–∞–π–ª—ä—Ç '{DOCUMENTS_EXCEL_FILE}' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω.")
    else:
        doc_column_name = find_document_column_name(documents_df)
        if not doc_column_name:
            st.error("–ù–µ –º–æ–≥–∞ –¥–∞ –Ω–∞–º–µ—Ä—è –∫–æ–ª–æ–Ω–∞ –∑–∞ –Ω–æ–º–µ—Ä –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç.")
        else:
            doc_number = st.text_input("–í—ä–≤–µ–¥–µ—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç:").strip()
            if st.button("–¢—ä—Ä—Å–∏ —Å AI"):
                if not doc_number:
                    st.warning("–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç.")
                else:
                    # First, filter with pandas to get a relevant subset of data
                    matching_docs_df = documents_df[documents_df[doc_column_name].astype(str).str.strip() == doc_number]
                    if matching_docs_df.empty:
                        st.error(f"–î–æ–∫—É–º–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä '{doc_number}' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –≤ –¥–∞–Ω–Ω–∏—Ç–µ.")
                    else:
                        # Convert only the relevant part of the DataFrame to a CSV string
                        data_string_subset = matching_docs_df.to_csv(index=False)
                        with st.spinner("AI –∞–Ω–∞–ª–∏–∑–∏—Ä–∞ –¥–∞–Ω–Ω–∏—Ç–µ... –ú–æ–ª—è, –∏–∑—á–∞–∫–∞–π—Ç–µ."):
                            # Call the new, more reliable AI function
                            result = run_ai_doc_search(doc_number, data_string_subset, doc_column_name)

                        if not result or not result.get("–¥–æ–∫—É–º–µ–Ω—Ç–∏"):
                            st.error(f"AI –Ω–µ —É—Å–ø—è –¥–∞ –æ–±—Ä–∞–±–æ—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç ‚Ññ{doc_number}. –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–Ω–Ω–∏—Ç–µ –≤—ä–≤ —Ñ–∞–π–ª–∞.")
                        else:
                            st.success(f"–ù–∞–º–µ—Ä–µ–Ω–∏ —Å–∞ {len(result['–¥–æ–∫—É–º–µ–Ω—Ç–∏'])} –∑–∞–ø–∏—Å–∞ –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç ‚Ññ{doc_number}")
                            for doc_item in result.get("–¥–æ–∫—É–º–µ–Ω—Ç–∏", []):
                                with st.expander(f"**–ö–ª–∏–µ–Ω—Ç:** {doc_item.get('–ò–º–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç', '-')} | **–ü—Ä–æ–¥—É–∫—Ç:** {doc_item.get('–ò–º–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç', '-')}"):
                                    st.markdown(f"**–î–∞—Ç–∞ –Ω–∞ –∏–∑–¥–∞–≤–∞–Ω–µ:** {doc_item.get('–î–∞—Ç–∞ –Ω–∞ –∏–∑–¥–∞–≤–∞–Ω–µ', '-')}")
                                    st.markdown(f"**–ë–µ–ª–µ–∂–∫–∞ –∫—ä–º –∑–∞–ø–∏—Å–∞:** *{doc_item.get('–ë–µ–ª–µ–∂–∫–∞', '–ù—è–º–∞')}*")
                                    st.markdown(
                                        f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {doc_item.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '-')} | **–¶–µ–Ω–∞:** {doc_item.get('–¶–µ–Ω–∞', '-')} | **–°—É–º–∞:** {doc_item.get('–°—É–º–∞ –ª–≤.', '-')}")