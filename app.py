import streamlit as st
import pandas as pd
import gspread
from gspread_dataframe import set_with_dataframe
from datetime import datetime
import re
import json
import google.generativeai as genai
from copy import copy

# --- Page and PWA Configuration ---
st.set_page_config(
    page_title="–°–∫–ª–∞–¥–æ–≤ AI –ê—Å–∏—Å—Ç–µ–Ω—Ç",
    layout="centered",
    page_icon="static/icon-192x192.png" # Sets the browser tab icon
)
# Link to the PWA manifest
st.markdown('<link rel="manifest" href="/static/manifest.json">', unsafe_allow_html=True)


# --- API Key Configuration ---
# This function configures the Gemini API key from Streamlit Secrets
def configure_genai():
    try:
        api_key = st.secrets["GEMINI_API_KEY"]
        genai.configure(api_key=api_key)
        return True
    except (KeyError, FileNotFoundError):
        st.error("–í–∞—à–∏—è—Ç Gemini API –∫–ª—é—á –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –≤ Streamlit Secrets. –ú–æ–ª—è, –¥–æ–±–∞–≤–µ—Ç–µ –≥–æ.")
        return False

# Configure the API at the start
AI_ENABLED = configure_genai()

# --- Google Sheets Authentication and Functions ---
@st.cache_resource
def get_gspread_client():
    """Initializes and returns the gspread client using Streamlit Secrets."""
    try:
        return gspread.service_account_from_dict(st.secrets["gcp_service_account"])
    except Exception as e:
        st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ —Å Google Sheets: {e}")
        return None


@st.cache_data(ttl=60)  # Cache data for 60 seconds
def load_data_from_sheet(sheet_name):
    """Loads data from a specified Google Sheet into a pandas DataFrame."""
    client = get_gspread_client()
    if not client:
        return None
    try:
        sheet = client.open(sheet_name).sheet1
        # For "SalesData", headers are on row 4. For "Inventory", on row 1.
        header_row = 4 if sheet_name == "SalesData" else 1
        all_data = sheet.get_all_records(head=header_row, default_blank="")
        df = pd.DataFrame(all_data)
        # Clean up column names by removing extra spaces
        df.columns = [re.sub(r'\s+', ' ', str(c).strip()) for c in df.columns]

        # --- FIX: Filter out the 'TOTAL' row ---
        if '–ö–ª–∏–µ–Ω—Ç –∏–º–µ' in df.columns:
            df = df[df['–ö–ª–∏–µ–Ω—Ç –∏–º–µ'].astype(str).str.strip().str.upper() != '–û–ë–©–û']

        return df.fillna('')
    except gspread.exceptions.SpreadsheetNotFound:
        st.error(f"Google Sheet —Å –∏–º–µ '{sheet_name}' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω. –ú–æ–ª—è, –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –∏–º–µ—Ç–æ –∏ –ø—Ä–∞–≤–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç—ä–ø.")
        return None
    except Exception as e:
        st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ '{sheet_name}': {e}")
        return None

def update_inventory(product_name, quantity_to_subtract):
    """Finds a product in the Inventory sheet and updates its quantity."""
    client = get_gspread_client()
    if not client: return False
    try:
        sheet = client.open("Inventory").sheet1
        cell = sheet.find(product_name, in_column=1)
        if not cell:
            st.error(f"–ü—Ä–æ–¥—É–∫—Ç '{product_name}' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –≤ 'Inventory'.")
            return False
        current_quantity = int(sheet.cell(cell.row, 2).value)
        new_quantity = current_quantity - quantity_to_subtract
        if new_quantity < 0:
            st.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç—ä—á–Ω–∞ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç –∑–∞ '{product_name}'.")
            return False
        sheet.update_cell(cell.row, 2, new_quantity)
        load_data_from_sheet.clear() # Clear cache to show update
        return True
    except Exception as e:
        st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∞: {e}")
        return False


def append_to_sales(row_data, all_cols):
    """Appends a new row of data to the SalesData sheet before the 'TOTAL' row."""
    client = get_gspread_client()
    if not client: return False
    try:
        sheet = client.open("SalesData").sheet1
        # Find the "–û–ë–©–û" row to insert above it
        total_cell = sheet.find("–û–ë–©–û")  # Search the entire sheet
        insert_row_index = total_cell.row if total_cell else len(sheet.get_all_values()) + 1
        row_to_insert = [row_data.get(col, '') for col in all_cols]

        # --- THE FIX: Add inherit_from_before=True ---
        # This tells Google Sheets to copy the style from the row ABOVE, not below.
        sheet.insert_row(
            row_to_insert,
            insert_row_index,
            value_input_option='USER_ENTERED',
            inherit_from_before=True
        )

        load_data_from_sheet.clear()  # Clear cache
        return True
    except Exception as e:
        st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∑–∞–ø–∏—Å –≤ 'SalesData': {e}")
        return False

# --- Restored AI Search Function ---
def run_ai_doc_search(doc_number, data_string, doc_column_name):
    """Uses the improved 'few-shot' prompt to reliably find doc info."""
    if not AI_ENABLED:
        st.error("AI —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ –µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–∞ –ø–æ—Ä–∞–¥–∏ –ª–∏–ø—Å–≤–∞—â API –∫–ª—é—á.")
        return None
    model = genai.GenerativeModel('gemini-1.5-pro-latest')
    prompt = f"""
    You are an expert AI assistant for analyzing tabular data from a CSV string.
    Your task is to find all rows for document number '{doc_number}' and extract the specified information for each row into a valid JSON format.
    The main challenge is to correctly identify the '–ò–º–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç' (Product Name) and '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' (Quantity). The '–ò–º–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç' is the *name of the column* that contains the quantity for that specific row. This column will be located between the '–û–±—â–æ –∫–æ–ª-–≤–æ' and '–¶–µ–Ω–∞' columns.
    ---
    **EXAMPLE:**
    *Input Data Snippet:*
    ```csv
    –ö–ª–∏–µ–Ω—Ç –∏–º–µ,–ë–µ–ª–µ–∂–∫–∞,–î–∞—Ç–∞,–§–∞–∫—Ç—É—Ä–∞ ‚Ññ,–û–±—â–æ –∫–æ–ª-–≤–æ,Product A,Product B,–¶–µ–Ω–∞,–°—É–º–∞ –ª–≤.
    –ó–ü –ò–í–ê–ù –ü–ï–¢–†–û–í,,2024-07-20,59460,10,,10,150.00,1500.00
    ```
    *Desired JSON Output for the example:*
    ```json
    {{
      "–¥–æ–∫—É–º–µ–Ω—Ç–∏": [
        {{
          "–ò–º–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç": "–ó–ü –ò–í–ê–ù –ü–ï–¢–†–û–í",
          "–ë–µ–ª–µ–∂–∫–∞": "",
          "–î–∞—Ç–∞ –Ω–∞ –∏–∑–¥–∞–≤–∞–Ω–µ": "2024-07-20",
          "–ò–º–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç": "Product B",
          "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "10",
          "–¶–µ–Ω–∞": "150.00",
          "–°—É–º–∞ –ª–≤.": "1500.00"
        }}
      ]
    }}
    ```
    ---
    **NOW, ANALYZE THE FOLLOWING DATA AND PROVIDE THE JSON OUTPUT:**
    **Document to find:** '{doc_number}'
    **Data:**
    ```csv
    {data_string}
    ```
    **Instructions:**
    1. Find ALL rows where the '{doc_column_name}' column is exactly '{doc_number}'.
    2. For each matching row:
        - Extract "–ò–º–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç", "–ë–µ–ª–µ–∂–∫–∞", "–î–∞—Ç–∞", "–¶–µ–Ω–∞", and "–°—É–º–∞ –ª–≤." directly from their columns. Use the '–î–∞—Ç–∞' value for "–î–∞—Ç–∞ –Ω–∞ –∏–∑–¥–∞–≤–∞–Ω–µ".
        - To find "–ò–º–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç" and "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": Look at the columns between "–û–±—â–æ –∫–æ–ª-–≤–æ" and "–¶–µ–Ω–∞". The one column that has a number in it for this specific row is the "–ò–º–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç", and the number itself is the "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ".
    3. If no document is found, return an empty JSON object like `{{"–¥–æ–∫—É–º–µ–Ω—Ç–∏": []}}`.
    """
    try:
        response = model.generate_content(prompt)
        clean_response = response.text.strip().replace("```json", "").replace("```", "")
        if not clean_response or not clean_response.strip().startswith('{'):
            return None
        return json.loads(clean_response)
    except Exception:
        return None

# --- Main Streamlit App Logic ---
st.title("–°–∫–ª–∞–¥–æ–≤ AI –ê—Å–∏—Å—Ç–µ–Ω—Ç üì¶")

# Load data from Google Sheets
documents_df = load_data_from_sheet("SalesData")
inventory_df = load_data_from_sheet("Inventory")

app_mode = st.sidebar.radio(
    "–ò–∑–±–µ—Ä–µ—Ç–µ —Ä–µ–∂–∏–º –Ω–∞ —Ä–∞–±–æ—Ç–∞:",
    ("–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∑–∞–ø–∏—Å", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –î–æ–∫—É–º–µ–Ω—Ç (—Å AI)", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ü—Ä–æ–¥—É–∫—Ç")
)

# --- Mode 1: Add Entry ---
if app_mode == "–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∑–∞–ø–∏—Å":
    st.header("–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤ –∑–∞–ø–∏—Å")
    if documents_df is None:
        st.warning("–ù–µ –º–æ–≥–∞ –¥–∞ –∑–∞—Ä–µ–¥—è 'SalesData'. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ.")
    else:
        all_cols = documents_df.columns.tolist()
        try:
            start_index = all_cols.index('–û–±—â–æ –∫–æ–ª-–≤–æ') + 1
            end_index = all_cols.index('–¶–µ–Ω–∞')
            product_list = all_cols[start_index:end_index]
        except (ValueError, IndexError):
            product_list = []
            st.error("–°—Ç—Ä—É–∫—Ç—É—Ä–∞—Ç–∞ –Ω–∞ 'SalesData' –µ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞. –õ–∏–ø—Å–≤–∞—Ç '–û–±—â–æ –∫–æ–ª-–≤–æ' –∏–ª–∏ '–¶–µ–Ω–∞'.")

        if product_list:
            with st.form("new_entry_form"):
                st.subheader("–î–∞–Ω–Ω–∏ –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                client_name = st.text_input("–ò–º–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç")
                doc_number = st.text_input("–§–∞–∫—Ç—É—Ä–∞ ‚Ññ")
                doc_date = st.date_input("–î–∞—Ç–∞ –Ω–∞ –∏–∑–¥–∞–≤–∞–Ω–µ", value=datetime.now())
                doc_note = st.text_input("–ë–µ–ª–µ–∂–∫–∞")
                selected_product = st.selectbox("–ò–∑–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç", options=product_list)
                quantity = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=1, step=1)
                price = st.number_input("–ï–¥. —Ü–µ–Ω–∞ (–ª–≤.)", min_value=0.0, format="%.2f")
                submitted = st.form_submit_button("‚úÖ –ó–∞–ø–∞–∑–∏ –∑–∞–ø–∏—Å–∞")

                if submitted:
                    if not doc_number or not client_name:
                        st.warning("–ú–æ–ª—è, –ø–æ–ø—ä–ª–Ω–µ—Ç–µ '–§–∞–∫—Ç—É—Ä–∞ ‚Ññ' –∏ '–ò–º–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç'.")
                    else:
                        st.info("–û–±—Ä–∞–±–æ—Ç–∫–∞...")
                        if update_inventory(selected_product, quantity):
                            new_row_data = {col: '' for col in all_cols}
                            new_row_data['–î–∞—Ç–∞'] = doc_date.strftime('%m/%d/%Y')
                            new_row_data['–§–∞–∫—Ç—É—Ä–∞ ‚Ññ'] = doc_number
                            new_row_data['–ö–ª–∏–µ–Ω—Ç –∏–º–µ'] = client_name.upper()
                            new_row_data['–ë–µ–ª–µ–∂–∫–∞'] = doc_note
                            new_row_data['–û–±—â–æ –∫–æ–ª-–≤–æ'] = int(quantity)
                            new_row_data[selected_product] = int(quantity)
                            new_row_data['–¶–µ–Ω–∞'] = float(price)
                            new_row_data['–°—É–º–∞ –ª–≤.'] = float(quantity) * float(price)
                            if append_to_sales(new_row_data, all_cols):
                                st.success("‚úÖ –ó–∞–ø–∏—Å—ä—Ç –µ –¥–æ–±–∞–≤–µ–Ω –∏ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç–∏—Ç–µ —Å–∞ –æ–±–Ω–æ–≤–µ–Ω–∏!")
                                st.balloons()
                            else:
                                st.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –∑–∞–ø–∏—Å–∞. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ —Ä—ä—á–Ω–æ.")
                        else:
                            st.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∞.")

# --- Mode 2: Product Search ---
# --- Mode 2: Product Search ---
elif app_mode == "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ü—Ä–æ–¥—É–∫—Ç":
    st.header("–¢—ä—Ä—Å–µ–Ω–µ –ø–æ –ø—Ä–æ–¥—É–∫—Ç")
    if documents_df is None or inventory_df is None:
        st.error("–ù–µ –º–æ–≥–∞ –¥–∞ –∑–∞—Ä–µ–¥—è –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç Google Sheets.")
    else:
        all_cols = documents_df.columns.tolist()
        try:
            start_index = all_cols.index('–û–±—â–æ –∫–æ–ª-–≤–æ') + 1
            end_index = all_cols.index('–¶–µ–Ω–∞')
            product_list = all_cols[start_index:end_index]
            selected_product = st.selectbox("–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", product_list)

            if st.button("–¢—ä—Ä—Å–∏"):
                if selected_product:
                    # Inventory check
                    inventory_info = inventory_df[inventory_df['–ü—Ä–æ–¥—É–∫—Ç'] == selected_product]
                    quantity_available = inventory_info['–ù–∞–ª–∏—á–Ω–æ—Å—Ç'].iloc[0] if not inventory_info.empty else '0'
                    st.metric(label=f"–ù–∞–ª–∏—á–Ω–æ—Å—Ç –∑–∞ '{selected_product}'", value=f"{quantity_available} –±—Ä.")

                    # Find all documents containing the product
                    # pd.to_numeric helps handle any non-number values safely
                    matching_docs = documents_df[pd.to_numeric(documents_df[selected_product], errors='coerce').notna()]
                    st.subheader(f"–î–æ–∫—É–º–µ–Ω—Ç–∏, —Å—ä–¥—ä—Ä–∂–∞—â–∏ '{selected_product}':")

                    if matching_docs.empty:
                        st.info("–ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∑–∞ —Ç–æ–∑–∏ –ø—Ä–æ–¥—É–∫—Ç.")
                    else:
                        # --- IMPROVEMENT: Display results in clean expanders ---
                        for index, row in matching_docs.iterrows():
                            with st.expander(
                                    f"**–î–æ–∫—É–º–µ–Ω—Ç ‚Ññ:** {row.get('–§–∞–∫—Ç—É—Ä–∞ ‚Ññ', '-')} | **–ö–ª–∏–µ–Ω—Ç:** {row.get('–ö–ª–∏–µ–Ω—Ç –∏–º–µ', '-')}"):
                                st.markdown(f"**–î–∞—Ç–∞:** {row.get('–î–∞—Ç–∞', '-')}")
                                st.markdown(f"**–ë–µ–ª–µ–∂–∫–∞:** *{row.get('–ë–µ–ª–µ–∂–∫–∞', '–ù—è–º–∞')}*")
                                st.markdown(
                                    f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {row.get(selected_product, '-')} | **–¶–µ–Ω–∞:** {row.get('–¶–µ–Ω–∞', '-')} –ª–≤. | **–°—É–º–∞:** {row.get('–°—É–º–∞ –ª–≤.', '-')} –ª–≤.")

        except (ValueError, IndexError):
            st.error("–°—Ç—Ä—É–∫—Ç—É—Ä–∞—Ç–∞ –Ω–∞ 'SalesData' –µ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞.")


# --- Mode 3: AI Document Search ---
elif app_mode == "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –î–æ–∫—É–º–µ–Ω—Ç (—Å AI)":
    st.header("–¢—ä—Ä—Å–µ–Ω–µ –ø–æ –Ω–æ–º–µ—Ä –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç (—Å AI)")
    if documents_df is None:
        st.error("–ù–µ –º–æ–≥–∞ –¥–∞ –∑–∞—Ä–µ–¥—è –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç Google Sheets.")
    else:
        doc_column_name = '–§–∞–∫—Ç—É—Ä–∞ ‚Ññ'
        if doc_column_name not in documents_df.columns:
            st.error(f"–õ–∏–ø—Å–≤–∞ –∫–æ–ª–æ–Ω–∞ '{doc_column_name}' –≤ 'SalesData'.")
        else:
            doc_number = st.text_input("–í—ä–≤–µ–¥–µ—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç:").strip()
            if st.button("–¢—ä—Ä—Å–∏ —Å AI"):
                if not doc_number:
                    st.warning("–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç.")
                else:
                    matching_docs_df = documents_df[documents_df[doc_column_name].astype(str) == doc_number]
                    if matching_docs_df.empty:
                        st.error(f"–î–æ–∫—É–º–µ–Ω—Ç ‚Ññ'{doc_number}' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω.")
                    else:
                        data_string_subset = matching_docs_df.to_csv(index=False)
                        with st.spinner("AI –∞–Ω–∞–ª–∏–∑–∏—Ä–∞ –¥–∞–Ω–Ω–∏—Ç–µ..."):
                            result = run_ai_doc_search(doc_number, data_string_subset, doc_column_name)
                        if not result or not result.get("–¥–æ–∫—É–º–µ–Ω—Ç–∏"):
                            st.error(f"AI –Ω–µ —É—Å–ø—è –¥–∞ –æ–±—Ä–∞–±–æ—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç ‚Ññ{doc_number}.")
                        else:
                            st.success(f"–ù–∞–º–µ—Ä–µ–Ω–∏ —Å–∞ {len(result['–¥–æ–∫—É–º–µ–Ω—Ç–∏'])} –∑–∞–ø–∏—Å–∞ –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç ‚Ññ{doc_number}")
                            for doc_item in result.get("–¥–æ–∫—É–º–µ–Ω—Ç–∏", []):
                                with st.expander(f"**–ö–ª–∏–µ–Ω—Ç:** {doc_item.get('–ò–º–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç', '-')} | **–ü—Ä–æ–¥—É–∫—Ç:** {doc_item.get('–ò–º–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç', '-')}"):
                                    st.markdown(f"**–î–∞—Ç–∞ –Ω–∞ –∏–∑–¥–∞–≤–∞–Ω–µ:** {doc_item.get('–î–∞—Ç–∞ –Ω–∞ –∏–∑–¥–∞–≤–∞–Ω–µ', '-')}")
                                    st.markdown(f"**–ë–µ–ª–µ–∂–∫–∞:** *{doc_item.get('–ë–µ–ª–µ–∂–∫–∞', '–ù—è–º–∞')}*")
                                    st.markdown(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {doc_item.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '-')} | **–¶–µ–Ω–∞:** {doc_item.get('–¶–µ–Ω–∞', '-')} | **–°—É–º–∞:** {doc_item.get('–°—É–º–∞ –ª–≤.', '-')}")